#+title: ThePirateBay
ThePirateBay is a NixOS configuration tailored for this specific hardware:
- GA-Z170MX-Gaming 5
- Intel(R) Core(TM) i7-6700K
- GPU: N/A
- Samsung SSD 850 EVO 250GB (Two seperate drives)

* File-Tree
#+begin_src
├── homes
│   └── x86_64-linux
│       └── trong@ThePirateBay
├── modules
│   └── nixos
│       ├── desktops
│       │   ├── hyprland
│       │   └── sleepy-dwm
│       ├── oceanic
│       │   ├── audio
│       │   ├── theme
│       │   └── utils
│       ├── suites
│       │   ├── common
│       │   └── gaming
│       └── users
│           └── trong
└── systems
    ├── x86_64-install-iso
    │   └── minimal
    └── x86_64-linux
        └── ThePirateBay
            └── backgrounds
#+end_src
* Source
** systems/x84_64-linux/ThePirateBay
=Hardware.nix=


Declares hardware-specific options & handels kernel management.
#+begin_src nix :tangle systems/x84_64-linux/ThePirateBay/hardware.nix
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}:

{
  imports = [ (modulesPath + "/installer/scan/not-detected.nix") ];

  boot = {
    kernelPackages = pkgs.linuxPackages_zen;
    kernelModules = [ "kvm-intel" ];
    extraModulePackages = [ ];

    initrd = {
      availableKernelModules = [
        "xhci_pci"
        "ahci"
        "usb_storage"
        "usbhid"
        "sd_mod"
      ];
      kernelModules = [ ];
    };
  };

  # NixOS Root SSD
  fileSystems."/" =
    { device = "/dev/disk/by-uuid/9946d37c-1ce5-4666-aa13-895154a86533";
      fsType = "ext4";
    };

  # SSDTwo
  fileSystems."/drive/ssdtwo" =
    { device = "/dev/disk/by-uuid/0bc7cf14-fefa-4506-9661-929cc16cd3e0";
      fsType = "ext4";
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/718d892b-51fb-40a2-842f-eed9cb4dbdb3"; }
    ];

  networking.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
#+end_src

=default.nix=


The main declaration of the Oceanic desktop.
Here we enable all of the modules we want to inherit that's referenced down below.
ThePirateBay is my main host machine, it inherits all of the ~Oceanic~ modules.
#+begin_src nix :tangle systems/x84_64-linux/ThePirateBay/default.nix
{
  inputs,
  config,
  pkgs,
  lib,
  ...
}:

{
  imports = [ ./hardware.nix ];

  # NixOS boot options
  boot.loader.grub = {
    enable = true;
    device = "/dev/sda";
    useOSProber = true;
    theme = inputs.grub-themes.packages.${pkgs.system}.hyperfluent;
  };

  # Desktop hostname
  networking.hostName = "ThePirateBay";

  # Create user "trong" & set default shell
  users = {
    trong.create = true;
    users.trong.shell = pkgs.zsh;
  };

  # Set OS shell to Zsh
  programs.zsh.enable = true;

  # Nix options
  nix = {
    gc = { # Automatic garbage collection
      automatic = true;
      dates = "weekly";
      options = "--delete-older-than 7d";
    };
  };

  # Different suites for different needs
  suites = {
    common.enable = true; # Enables the common desktop properties
    gaming.enable = true; # Gaming options
  };

  # Enables the Oceanic desktop modules
  oceanic = {
    utils.enable = true;
    audio.enable = true;
    theme.enable = true;
  };

  # SDDM prerequisite
  environment.systemPackages = [(
    pkgs.catppuccin-sddm.override {
      flavor = "mocha";
      font  = "Comic Mono";
      fontSize = "12";
      background = "${./backgrounds/jpn-house.jpg}";
      loginBackground = true;
    }
  )];

  # Desktop environment
  services = {
    xserver = {
      enable = true;
      updateDbusEnvironment = true;
      videoDrivers = [ "intel-media-driver" ];
      xkb = {
        layout = "us";
        variant = "";
      };
    };

    displayManager.sddm = {
      enable = true;
      wayland.enable = true;

      theme = "catppuccin-mocha";
      package = pkgs.kdePackages.sddm;
    };
  };

  desktops = {
    hyprland.enable = true;
    sleepy-dwm.enable = true;
    xmonad.enable = false;
    cosmic.enable = false;
    awesome.enable = false;
  };

  system.stateVersion = "24.05";
}
#+end_src
** homes/x86_64-linux/trong@ThePirateBay
=default.nix=


When using the ~snowfallorg/lib~ system, the ~homes~ directory is meant to
have a user declared with their host.
This file contains the configuration tailored for ~trong~.


The ~shells/ apps/ programming/ gaming/ theme/~ directories are all modules that any user
can use thanks to ~snowfallorg~ & ~home-manager~ options (referenced in ~flake.nix~).
#+begin_src nix :tangle homes/x86_64-linux/trong@ThePirateBay
{
  config,
  lib,
  pkgs,
  osConfig,
  namespace,
  ...
}:
with lib;
with lib.${namespace}; {
  # Enable User
  snowfallorg.user = {
    enable = true;
    name = "trong";
  };

  # Shell Management
  shells = {
    zsh.enable = true;
    starship.enable = true;
    sleepy-xinit.enable = false;
  };

  # Applications
  apps = {
    misc = {
      enable = true;
      zen-browser.enable = true;
      spicetify.enable = true;

      terms = {
        tmux.enable = true;
        alacritty.enable = true;
        foot.enable = false;
        wezterm.enable = false;
      };

      ags = {
        enable = false;
        hyprpanel.enable = true;
      };
    };

    # Programming Tools
    programming = {
      enable = false; # Use Nix flake templates instead
      emacs.enable = true;
      nvchad.enable = true;
      hielo.enable = false;
      gamedev.enable = true;
    };

    # Gaming Options
    gaming = {
      enable = true;

      extras = {
        enable = true;
        emulation.enable = true;
        minecraft.enable = true;
        proton.enable = false;
      };
    };
  };

  # Theming
  theme = {
    stylix.enable = true;
    icons.papirus.nord.enable = true;
  };

  home.stateVersion = lib.mkDefault (osConfig.system.stateVersion or "24.05");
}
#+end_src
** modules/nixos
*** desktops
The ~desktops~ modules contain multiple desktops that can be enabled in ~systems/x84_64-linux/ThePirateBay/default.nix~.
For reference purposes I only have the code of the modules I currently use on this machine,
if you are interested in the other desktops I'd recommend checking it out yourself.


=hyprland/default.nix=

Hyprland is my main compositor, in-case I encounter issues with Wayland
I have my DWM configuration enabled too.
#+begin_src nix :tangle modules/nixos/desktops/hyprland/default.nix
{
  inputs,
  options,
  config,
  pkgs,
  lib,
  namespace,
  ...
}:
with lib;
with lib.${namespace}; let
  inherit (inputs) swww;
  cfg = config.desktops.hyprland;
in {
  options.desktops.hyprland = with types; {
    enable = mkBoolOpt false "Whether or not to enable Hyprland";
    # NOTE DISPLAY MANAGERS WILL ALWAYS BE MANAGED BY THE HOST NOT A MODULE
  };

  config = mkIf cfg.enable {
    programs = {
      hyprland = {
        enable = true;
        xwayland.enable = true;
        portalPackage = pkgs.xdg-desktop-portal-hyprland;
      };

      hyprlock.enable = false;
    };

    services.hypridle.enable = false;

    xdg.portal = {
      enable = true;
      extraPortals = [
        pkgs.xdg-desktop-portal-gtk
      ];
    };

    environment = {
      sessionVariables.NIXOS_OZONE_WL = "1";

      systemPackages = with pkgs; [
        # Desktop dependencies
        swww.packages.${pkgs.system}.swww
        pkgs.mpvpaper
        pkgs.grimblast
        pkgs.playerctl
        pkgs.brightnessctl
        pkgs.pamixer

        # Applications to be used with my Hyprland configuration
        pkgs.nemo-with-extensions
        pkgs.wofi
        pkgs.peazip
        pkgs.file-roller
        pkgs.pavucontrol
        pkgs.hyprpicker
      ];
    };
  };
}
#+end_src
=sleepy-dwm/default.nix=


Sleepy-DWM is my personal configuration of Suckless' Xorg Window-Manager DWM.
sleepy-dwm contains its own ~flake.nix~ where its modules are declared
[[https://github.com/thelinuxpirate/sleepy-dwm][(here)]].
#+begin_src nix :tangle modules/nixos/desktops/sleepy-dwm/default.nix
# Sleepy-DWM Nix port
{
  inputs,
  options,
  config,
  pkgs,
  lib,
  namespace,
  ...
}:
with lib;
with lib.${namespace}; let
  inherit (inputs) sleepy-dwm;
  cfg = config.desktops.sleepy-dwm;
in {
  options.desktops.sleepy-dwm = with types; {
    enable = mkBoolOpt false "Whether or not to enable Sleepy-DWM";
    # NOTE DISPLAY MANAGERS WILL ALWAYS BE MANAGED BY THE HOST NOT A MODULE
  };

  config = mkIf cfg.enable {
    services.xserver.windowManager.dwm = {
      enable = true;
      package = pkgs.dwm.overrideAttrs (oldAttrs: rec {
        pname = "sleepy-dwm";
        version = "6.5";
        src = pkgs.fetchFromGitHub {
          owner = "thelinuxpirate";
          repo = "sleepy-dwm";
          rev = "master";
          sha256 = "07vivrlgca0dybdfyb043q19drv7w4x1043qm0f1yfn14k4xm865";
        };
        nativeBuildInputs = oldAttrs.nativeBuildInputs or [] ++ [ pkgs.imlib2 ];
      });
    };

    sleepy = {
      enableSlstatus = true;
      enableST = false;
      enableDmenu = true;
    };

    environment.systemPackages = with pkgs; [
      # Desktop dependencies
      pkgs.alacritty
      pkgs.feh
      pkgs.pamixer
      pkgs.playerctl
      pkgs.brightnessctl
      pkgs.picom
      pkgs.dunst
      pkgs.flameshot

      # Applications used with Sleepy-DWM
      pkgs.nemo-with-extensions
      pkgs.file-roller
      pkgs.peazip
      pkgs.pavucontrol
    ];
  };
}
#+end_src
